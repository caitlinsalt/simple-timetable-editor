<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unicorn.Writer</name>
    </assembly>
    <members>
        <member name="T:Unicorn.Writer.Dummy.DummyGraphicsState">
            <summary>
            Dummy class pending implementation.
            </summary>
        </member>
        <member name="T:Unicorn.Writer.Dummy.DummyPageGraphics">
            <summary>
            Dummy class pending implementation.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawFilledPolygon(System.Collections.Generic.IEnumerable{Unicorn.Interfaces.UniPoint})">
            <summary>
            Draw a filled polygon - dummy method.
            </summary>
            <param name="vertexes"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a line - dummy method
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawLine(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a line - dummy method
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="width"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawLine(System.Double,System.Double,System.Double,System.Double,System.Double,Unicorn.Interfaces.UniDashStyle)">
            <summary>
            Draw a line - dummy method
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="width"></param>
            <param name="style"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a rectangle - dummy method
            </summary>
            <param name="xTopLeft"></param>
            <param name="yTopLeft"></param>
            <param name="rectWidth"></param>
            <param name="rectHeight"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawRectangle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a rectangle - dummy method
            </summary>
            <param name="xTopLeft"></param>
            <param name="yTopLeft"></param>
            <param name="rectWidth"></param>
            <param name="rectHeight"></param>
            <param name="lineWidth"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawString(System.String,Unicorn.Interfaces.IFontDescriptor,System.Double,System.Double)">
            <summary>
            Draw a string - dummy method
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.DrawString(System.String,Unicorn.Interfaces.IFontDescriptor,Unicorn.Interfaces.UniRectangle,Unicorn.Interfaces.HorizontalAlignment,Unicorn.Interfaces.VerticalAlignment)">
            <summary>
            Draw a string - dummy method
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="rect"></param>
            <param name="hAlign"></param>
            <param name="vAlign"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.MeasureString(System.String,Unicorn.Interfaces.IFontDescriptor)">
            <summary>
            Measure a string - dummy method that returns a very rough approximation.
            </summary>
            <param name="text">The text to be measured</param>
            <param name="font">The font in which the text is to be displayed</param>
            <returns></returns>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.Restore(Unicorn.Interfaces.IGraphicsState)">
            <summary>
            Restore a saved state - dummy method
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.RotateAt(System.Double,System.Double,System.Double)">
            <summary>
            Rotate the context - dummy method
            </summary>
            <param name="angle"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Unicorn.Writer.Dummy.DummyPageGraphics.Save">
            <summary>
            Save the state - dummy method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unicorn.Writer.Extensions.PhysicalPageSizeExtensions">
            <summary>
            Extension methods for the <see cref="T:Unicorn.Interfaces.PhysicalPageSize" /> enumeration.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Extensions.PhysicalPageSizeExtensions.ToPdfRectangle(Unicorn.Interfaces.PhysicalPageSize)">
            <summary>
            Convert a <see cref="T:Unicorn.Interfaces.PhysicalPageSize" /> value to a <see cref="T:Unicorn.Writer.Primitives.PdfRectangle" /> representing the size of the page.
            </summary>
            <param name="pageSize">The page size to be converted.</param>
            <returns>A <see cref="T:Unicorn.Writer.Primitives.PdfRectangle" /> instance containing the dimensions of the page (in portrait orientation).  
            The first coordinate pair is (0,0); the second is (width, height).</returns>
        </member>
        <member name="M:Unicorn.Writer.Extensions.PhysicalPageSizeExtensions.ToPdfRectangle(Unicorn.Interfaces.PhysicalPageSize,Unicorn.Interfaces.PageOrientation)">
            <summary>
            Convert a <see cref="T:Unicorn.Interfaces.PhysicalPageSize" /> value to a <see cref="T:Unicorn.Writer.Primitives.PdfRectangle" /> representing the size of the page.
            </summary>
            <param name="pageSize">The page size to be converted.</param>
            <param name="orientation">The orientation of the page.</param>
            <returns>A <see cref="T:Unicorn.Writer.Primitives.PdfRectangle" /> instance containing the dimensions of the page (in portrait orientation).  
            The first coordinate pair is (0,0); the second is (width, height).</returns>
        </member>
        <member name="T:Unicorn.Writer.Extensions.UniSizeExtensions">
            <summary>
            Extensions methods for the <see cref="T:Unicorn.Interfaces.UniSize" /> class.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Extensions.UniSizeExtensions.ToPdfRectangle(Unicorn.Interfaces.UniSize)">
            <summary>
            Convert a <see cref="T:Unicorn.Interfaces.UniSize" /> instance into a <see cref="T:Unicorn.Writer.Primitives.PdfRectangle" /> of the same size and with its bottom-left corner at the origin.
            </summary>
            <param name="size">The size to be converted.</param>
            <returns>A <see cref="T:Unicorn.Writer.Primitives.PdfRectangle" /> instance of the same size as the parameter.</returns>
            <exception cref="T:System.NullReferenceException">Thrown if the size parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Interfaces.IPdfCrossRefTable">
            <summary>
            Interface representing a PDF cross-reference table.  It consists of numbered slots, each referring to an object and its offset within the output stream.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Interfaces.IPdfCrossRefTable.Count">
            <summary>
            Return the number of slots claimed from the table.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Interfaces.IPdfCrossRefTable.ClaimSlot">
            <summary>
            Request a fresh slot from the table.
            </summary>
            <returns>The ID number of the newly-claimed slot.</returns>
        </member>
        <member name="M:Unicorn.Writer.Interfaces.IPdfCrossRefTable.SetSlot(Unicorn.Writer.Interfaces.IPdfIndirectObject,System.Int32)">
            <summary>
            Set the stream offset of a slot entry.
            </summary>
            <param name="value">An indirect object whose ObjectId property is a slot ID number previously obtained by a call to <see cref="M:Unicorn.Writer.Interfaces.IPdfCrossRefTable.ClaimSlot" />.</param>
            <param name="offset">The byte offset of the object within the PDF stream.</param>
        </member>
        <member name="T:Unicorn.Writer.Interfaces.IPdfIndirectObject">
            <summary>
            The interface which represents an "indirect object".  A PDF indirect object is a top-level object in the file, can be uniquely identified among the indirect objects in the file by
            its combination of object ID and generation number, and is indexed in the file's cross-reference table.  It consists of a direct object wrapped with a prologue and epilogue.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Interfaces.IPdfIndirectObject.ObjectId">
            <summary>
            The object ID number of this object.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Interfaces.IPdfIndirectObject.Generation">
            <summary>
            The generation number of this object.  As the library currently does not support rewriting existing files, this property will always equal zero.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Interfaces.IPdfIndirectObject.GetReference">
            <summary>
            Return a <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> which refers to this object.
            </summary>
            <returns>A <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> object which refers to this object.</returns>
        </member>
        <member name="T:Unicorn.Writer.Interfaces.IPdfPrimitiveObject">
            <summary>
            The interface which represents "primitive objects" - the base types which make up PDF data, such as "integer", "real", "string" or "dictionary" (this is not an exclusive list).
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Interfaces.IPdfPrimitiveObject.ByteLength">
            <summary>
            The length of the object when converted to bytes.  PDF files have a limit of 255 characters between line-separators outwith streams; this property is used to determine if 
            a line separator may need to be inserted.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Interfaces.IPdfPrimitiveObject.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert the object to bytes and append them to a list.
            </summary>
            <param name="bytes">The list to append the object's bytes to.</param>
            <returns>The number of bytes added to the list.</returns>
        </member>
        <member name="M:Unicorn.Writer.Interfaces.IPdfPrimitiveObject.WriteTo(Unicorn.Writer.Primitives.PdfStream)">
            <summary>
            Write the object to a <see cref="T:Unicorn.Writer.Primitives.PdfStream" />.
            </summary>
            <param name="stream">The stream to write the object to.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="T:Unicorn.Writer.Interfaces.IPdfWriteable">
            <summary>
            An interface representing any PDF data type which can be written to a <see cref="T:System.IO.Stream" />, including both direct and indirect objects.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Interfaces.IPdfWriteable.WriteTo(System.IO.Stream)">
            <summary>
            Write the object to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write the object to.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="T:Unicorn.Writer.PdfDocument">
            <summary>
            The class which represents an entire PDF document.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.PdfDocument.DefaultPhysicalPageSize">
            <summary>
            The default size of new pages added to the document.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.PdfDocument.DefaultPageOrientation">
            <summary>
            The default orientation of new pages added to the document.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.PdfDocument.DefaultHorizontalMarginProportion">
            <summary>
            The default size of each left and right margin, as a proportion of the total page width.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.PdfDocument.DefaultVerticalMarginProportion">
            <summary>
            The default size of each top and bottom margin, as a proportion of the total page height.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.#ctor">
            <summary>
            Default constructor.  Creates a document which defaults to A4 portrait pages with all margins 6% of the page dimensions.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.#ctor(Unicorn.Interfaces.PhysicalPageSize,Unicorn.Interfaces.PageOrientation,System.Double,System.Double)">
            <summary>
            Constructor which lets the caller specify default page size, orientation and margins.
            </summary>
            <param name="defaultPageSize">Default page size.</param>
            <param name="defaultOrientation">Default page orientation.</param>
            <param name="defaultHorizontalMarginProportion">Default left and right margin proportions.</param>
            <param name="defaultVerticalMarginProportion">Default top and bottom margin proportions.</param>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.AppendPage(Unicorn.Interfaces.PhysicalPageSize,Unicorn.Interfaces.PageOrientation,System.Double,System.Double)">
            <summary>
            Append a new page to the document, specifying its size, orientation and margins.
            </summary>
            <param name="size">The page size.</param>
            <param name="orientation">The page orientation.</param>
            <param name="horizontalMarginProportion">The size of the left and right margins, as a proportion of the page width.</param>
            <param name="verticalMarginProportion">The size of the top and bottom margins, as a proportion of the page height.</param>
            <returns>An <see cref="T:Unicorn.Interfaces.IPageDescriptor" /> describing the new page.</returns>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.AppendPage(Unicorn.Interfaces.PageOrientation)">
            <summary>
            Append a new page to the document with default size and margins, specifying its orientation.
            </summary>
            <param name="pageOrientation">The orientation of the new page.</param>
            <returns>An <see cref="T:Unicorn.Interfaces.IPageDescriptor" /> describing the new page.</returns>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.AppendPage">
            <summary>
            Append a new page to the document, with default size, orientation and margins.
            </summary>
            <returns>An <see cref="T:Unicorn.Interfaces.IPageDescriptor" /> describing the new page.</returns>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.Write(System.IO.Stream)">
            <summary>
            Write the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Unicorn.Writer.PdfDocument.WriteTo(System.IO.Stream)">
            <summary>
            Write the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.CommonPdfNames">
            <summary>
            Defines a number of commonly-used <see cref="T:Unicorn.Writer.Primitives.PdfName" /> objects which are used in all PDF files at least once, to encourage callers to reuse these objects instead of creating new instances.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Catalog">
            <summary>
            The /Catalog name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Count">
            <summary>
            The /Count name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Kids">
            <summary>
            The /Kids name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Length">
            <summary>
            The /Length name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.MediaBox">
            <summary>
            The /MediaBox name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Page">
            <summary>
            The /Page name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Pages">
            <summary>
            The /Pages name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Parent">
            <summary>
            The /Parent name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Resources">
            <summary>
            The /Resources name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Root">
            <summary>
            The /Root name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Size">
            <summary>
            The /Size name.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.CommonPdfNames.Type">
            <summary>
            The /Type name.
            </summary>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfArray">
            <summary>
            The class which represents a PDF array object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfArray.#ctor(System.Collections.Generic.IEnumerable{Unicorn.Writer.Interfaces.IPdfPrimitiveObject})">
            <summary>
            Create a new array whose contents are the given primitives.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfArray.FormatBytes">
            <summary>
            Convert the contents of the array into an array of bytes.
            </summary>
            <returns>An array of bytes which represent this object, serialised.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfBoolean">
            <summary>
            The class which represents a true or false value.  It is immutable and its constructor is private, but it provides static properties to obtain true and false instances, as well as a 
            <see cref="M:Unicorn.Writer.Primitives.PdfBoolean.Get(System.Boolean)" /> method to get the instance for a specific runtime value.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.PdfBoolean.True">
            <summary>
            The true value.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.PdfBoolean.False">
            <summary>
            The false value.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfBoolean.Value">
            <summary>
            The value of this object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.Get(System.Boolean)">
            <summary>
            Get an instance 
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.FormatBytes">
            <summary>
            Convert this instance into an array of bytes.
            </summary>
            <returns>An array of bytes encoding the values "true " and "false ".</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.Equals(Unicorn.Writer.Primitives.PdfBoolean)">
            <summary>
            Test if this instance is equal to a second instance.
            </summary>
            <param name="other">The instance to test against.</param>
            <returns>True if the other instance is equal to this; false if not.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.Equals(System.Object)">
            <summary>
            Test if this instance is equal to an object.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>True if the other object is equal to this; false if not.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.GetHashCode">
            <summary>
            Create a hash code for this instance.
            </summary>
            <returns>The hash code of the underlying true or false value.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.op_Equality(Unicorn.Writer.Primitives.PdfBoolean,Unicorn.Writer.Primitives.PdfBoolean)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfBoolean" /> instance.</param>
            <param name="b">A second <see cref="T:Unicorn.Writer.Primitives.PdfBoolean" /> instance.</param>
            <returns>True if the two parameters are equal, false if not.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfBoolean.op_Inequality(Unicorn.Writer.Primitives.PdfBoolean,Unicorn.Writer.Primitives.PdfBoolean)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfBoolean" /> instance.</param>
            <param name="b">A second <see cref="T:Unicorn.Writer.Primitives.PdfBoolean" /> instance.</param>
            <returns>True if the two parameters are unequal, false if not.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfDictionary">
            <summary>
            The class representing a PDF dictionary.  Unlike most of the classes in the Unicorn.Writer.Primitives namespace, this one is mutable.  The keys to the dictionary are 
            <see cref="T:Unicorn.Writer.Primitives.PdfName" /> instances; the values can be any <see cref="T:Unicorn.Writer.Interfaces.IPdfPrimitiveObject" />.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfDictionary.ByteLength">
            <summary>
            The length of the object when converted into bytes.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfDictionary.Add(Unicorn.Writer.Primitives.PdfName,Unicorn.Writer.Interfaces.IPdfPrimitiveObject)">
            <summary>
            Add a new entry to the dictionary.
            </summary>
            <param name="key">The name to be used as the key for the new dictionary entry.</param>
            <param name="value">The value of the new dictionary entry.  If this parameter is null, a <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance will be used for the entry value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the key parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the dictionary already contains an entry with an equal key.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfDictionary.WriteTo(System.IO.Stream)">
            <summary>
            Write the current contents of the dictionary to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfDictionary.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert the current contents of the dictionary to bytes and append them to a list.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended to the list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfDictionary.WriteTo(Unicorn.Writer.Primitives.PdfStream)">
            <summary>
            Write the current contents of the dictionary to a <see cref="T:Unicorn.Writer.Primitives.PdfStream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfIndirectObject">
            <summary>
            General implementation of an indirect object.  A PDF indirect object is a top-level object in the file, can be uniquely identified among the indirect objects in the file by
            its combination of object ID and generation number, and is indexed in the file's cross-reference table.  It consists of a direct object wrapped with a prologue and epilogue.  This
            general implementation wraps an arbitrary direct object.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfIndirectObject.CachedPrologue">
            <summary>
            The indirect object prologue as a list of bytes.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfIndirectObject.CachedEpilogue">
            <summary>
            The indirect object epilogue as a list of bytes.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfIndirectObject.ObjectId">
            <summary>
            The ID number of this object.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfIndirectObject.Generation">
            <summary>
            The generation number of this object.  As the library does not currently support rewriting existing PDF files, at present this property is always zero.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfIndirectObject.ByteLength">
            <summary>
            The length of this object when converted into a stream of bytes.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor which only sets object ID and generation number.  This constructor should only be called by the constructors of derived classes which maintain their own contents.
            </summary>
            <param name="objectId">The object ID of this object.  This should be an ID number obtained from the file's cross-reference table."/></param>
            <param name="generation">The generation number of this object.  As the library does not currently support rewriting existing files, this parameter should normally be zero.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the object ID is equal to or less than zero, or the generation number is less than zero.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.#ctor(System.Int32,Unicorn.Writer.Interfaces.IPdfPrimitiveObject,System.Int32)">
            <summary>
            Constructor which sets object ID, generation number and contents.
            </summary>
            <param name="objectId">The object ID of this object.  This should be an ID number obtained from the file's cross-reference table.</param>
            <param name="contents">The direct primitive object which makes up the contents of the indirect object.</param>
            <param name="generation">The generation nyumber of this object.  Defaults to 0.  As the library does not currently support rewriting existing files, this parameter should
            not be supplied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the object ID is equal to or less than zero, or the generation number is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the contents paraemter is an indirect object.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.WriteTo(System.IO.Stream)">
            <summary>
            Write this object to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert this object to a series of bytes and append them to an existing list.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.WriteTo(Unicorn.Writer.Primitives.PdfStream)">
            <summary>
            Attempt to write this object to a <see cref="T:Unicorn.Writer.Primitives.PdfStream" />.  This is implemented due to interface inheritance but is an invalid operation, as PDF streams can only contain direct objects.
            </summary>
            <param name="stream">The stream to attempt to write to.</param>
            <returns>This method does not return.</returns>
            <exception cref="T:System.InvalidOperationException">This exception is always thrown.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.Write``1(System.Action{``0,System.Byte[]},System.Func{``0,System.Int32},``0)">
            <summary>
            Write this object to a destination using a pair of writer methods.  This is largely intended to be used internally, but is exposed to derived classes.
            </summary>
            <typeparam name="T">The type of the destination object.</typeparam>
            <param name="writer">The writer method used to write the prologue and epilogue parts of the object.</param>
            <param name="contentWriter">The writer method used to write the content of the object - an instance method of the content itself.</param>
            <param name="dest">The destination object, to which the object will be written.</param>
            <returns>The number of bytes written to the destination.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.WriteToStream(System.IO.Stream,System.Byte[])">
            <summary>
            Helper method that writes the array given as the second parameter to the stream given as the first parameter.
            </summary>
            <param name="str">Stream to write to.</param>
            <param name="bytes">Array to write.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.WriteToList(System.Collections.Generic.List{System.Byte},System.Byte[])">
            <summary>
            Helper method that appends the second parameter to the first parameter.
            </summary>
            <param name="list">The list that will be appended to.</param>
            <param name="bytes">The bytes to append.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.GetReference">
            <summary>
            Get a <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> instance that refers to this object.
            </summary>
            <returns>A <see cref="T:Unicorn.Writer.Primitives.PdfReference" /></returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfIndirectObject.GeneratePrologueAndEpilogue">
            <summary>
            Populate the <see cref="P:Unicorn.Writer.Primitives.PdfIndirectObject.CachedPrologue" /> and <see cref="P:Unicorn.Writer.Primitives.PdfIndirectObject.CachedEpilogue" /> properties.
            </summary>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfInteger">
            <summary>
            The class which represents an immutable PDF integer object.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfInteger.Value">
            <summary>
            The integer value of the object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.#ctor(System.Int32)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="val">The value of the object.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.FormatBytes">
            <summary>
            Convert this object into an array of bytes.
            </summary>
            <returns>An array of bytes representing the value of the object</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.Equals(Unicorn.Writer.Primitives.PdfInteger)">
            <summary>
            Test for equality.
            </summary>
            <param name="other">the object to test against.</param>
            <returns>True if the parameter has the same value as this object, false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.Equals(System.Object)">
            <summary>
            Test for equality.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>True if the parameter is a <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance with the same value as this object, false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.GetHashCode">
            <summary>
            Generate a hashcode based on the value of this object.
            </summary>
            <returns>The hashcode of the value of this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.op_Equality(Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfInteger)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <param name="b">A second <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <returns>True if the two instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfInteger.op_Inequality(Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfInteger)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <returns>True if the two instances are unequal, false otherwise.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfName">
            <summary>
            Immutable class representing a PDF name object
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfName.Value">
            <summary>
            The value of this name object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.#ctor(System.String)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="name">The value of the new object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the parameter contains whitespace characters, or characters classed as "delimiters" by the PDF standard.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.FormatBytes">
            <summary>
            Convert this object to an array of bytes.
            </summary>
            <returns>An array of bytes representing this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.Equals(Unicorn.Writer.Primitives.PdfName)">
            <summary>
            Equality test method.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if the other object has the same value as this; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.Equals(System.Object)">
            <summary>
            Equality test method.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>True if the other object is a <see cref="T:Unicorn.Writer.Primitives.PdfName" /> instance with the same value as this; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.GetHashCode">
            <summary>
            Generate a hashcode for this object.
            </summary>
            <returns>The hashcode of the value of this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.op_Equality(Unicorn.Writer.Primitives.PdfName,Unicorn.Writer.Primitives.PdfName)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfName" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfName" /> instance.</param>
            <returns>True if the parameters are equal; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfName.op_Inequality(Unicorn.Writer.Primitives.PdfName,Unicorn.Writer.Primitives.PdfName)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfName" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfName" /> instance.</param>
            <returns>True if the parameters are unequal; false otherwise.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfNull">
            <summary>
            Class representing the PDF null object.  This class is a singleton; the instance is exposed through the <see cref="F:Unicorn.Writer.Primitives.PdfNull.Value" /> property.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Primitives.PdfNull.Value">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfNull.ByteLength">
            <summary>
            The length of this object when encoded as bytes.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.WriteTo(System.IO.Stream)">
            <summary>
            Write this object to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert this object to bytes and append them to a list.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.WriteTo(Unicorn.Writer.Primitives.PdfStream)">
            <summary>
            Write this object to a <see cref="T:Unicorn.Writer.Primitives.PdfStream" />.
            </summary>
            <param name="stream">The <see cref="T:Unicorn.Writer.Primitives.PdfStream" /> to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.Equals(Unicorn.Writer.Primitives.PdfNull)">
            <summary>
            Equality test method.
            </summary>
            <param name="other">Another <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.Equals(System.Object)">
            <summary>
            Equality test method.
            </summary>
            <param name="obj">An object to test against.</param>
            <returns>True if the parameter is a <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.GetHashCode">
            <summary>
            Return a hashcode for this object.
            </summary>
            <returns>A constant hashcode, as all <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instances can be considered equal.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.op_Equality(Unicorn.Writer.Primitives.PdfNull,Unicorn.Writer.Primitives.PdfNull)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance.</param>
            <returns>True if the operands are both null or both not null; false otherwise</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfNull.op_Inequality(Unicorn.Writer.Primitives.PdfNull,Unicorn.Writer.Primitives.PdfNull)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfNull" /> instance.</param>
            <returns>False if the operands are both null or both not null; true otherwise.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfReal">
            <summary>
            Immutable class representing a real number.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfReal.Value">
            <summary>
            Value of this object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.#ctor(System.Decimal)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="val">The object value.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.#ctor(System.Int32)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="val">The object value.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.#ctor(System.Single)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="val">The object value.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.#ctor(System.Double)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="val">The object value.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.FormatBytes">
            <summary>
            Convert this object to an array of bytes.
            </summary>
            <returns>An array of bytes representing the value of this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.Equals(Unicorn.Writer.Primitives.PdfReal)">
            <summary>
            Equality test method.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the other object has the same value as this one; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.Equals(System.Object)">
            <summary>
            Equality test method.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if the other object is a <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance with the same value as this one; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.GetHashCode">
            <summary>
            Generate a hash code for this object.
            </summary>
            <returns>The hash code of the object's value.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.op_Equality(Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfReal)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <returns>True if the operands are equal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.op_Inequality(Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfReal)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <returns>True if the operands are unequal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.op_Equality(Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfInteger)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <param name="b">A <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <returns>True if the operands are equal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.op_Inequality(Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfInteger)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <param name="b">A <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <returns>True if the operands are unequal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.op_Equality(Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfReal)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <param name="b">A <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <returns>True if the operands are equal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReal.op_Inequality(Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfReal)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> instance.</param>
            <param name="b">A <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> instance.</param>
            <returns>True if the operands are unequal in value; false otherwise.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfRectangle">
            <summary>
            Immutable class representing a PDF rectangle: a PDF array with four elements, representing the lower-left and upper-right corners of a non-rotated rectangle.
            The coordinates can be either integers or reals, but not a mixture.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfRectangle.#ctor(Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfInteger,Unicorn.Writer.Primitives.PdfInteger)">
            <summary>
            Constructor that takes <see cref="T:Unicorn.Writer.Primitives.PdfInteger" /> parameters.
            </summary>
            <param name="lowerLeftX">The lower-left X coordinate.</param>
            <param name="lowerLeftY">The lower-left Y coordinate.</param>
            <param name="upperRightX">The upper-right X coordinate.</param>
            <param name="upperRightY">The upper-right Y coordinate.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfRectangle.#ctor(Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfReal,Unicorn.Writer.Primitives.PdfReal)">
            <summary>
            Constructor that takes <see cref="T:Unicorn.Writer.Primitives.PdfReal" /> parameters.
            </summary>
            <param name="lowerLeftX">The lower-left X coordinate.</param>
            <param name="lowerLeftY">The lower-left Y coordinate.</param>
            <param name="upperRightX">The upper-right X coordinate.</param>
            <param name="upperRightY">The upper-right Y coordinate.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor that takes <see cref="T:System.Int32" /> parameters.
            </summary>
            <param name="lowerLeftX">The lower-left X coordinate.</param>
            <param name="lowerLeftY">The lower-left Y coordinate.</param>
            <param name="upperRightX">The upper-right X coordinate.</param>
            <param name="upperRightY">The upper-right Y coordinate.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor that takes <see cref="T:System.Double" /> parameters.
            </summary>
            <param name="lowerLeftX">The lower-left X coordinate.</param>
            <param name="lowerLeftY">The lower-left Y coordinate.</param>
            <param name="upperRightX">The upper-right X coordinate.</param>
            <param name="upperRightY">The upper-right Y coordinate.</param>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfReference">
            <summary>
            Immutable class representing a reference to a PDF indirect object.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfReference.Value">
            <summary>
            The object this reference refers to.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.#ctor(Unicorn.Writer.Interfaces.IPdfIndirectObject)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="referent">The indirect object that this should be a reference to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the referent parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.FormatBytes">
            <summary>
            Converts this object to an array of bytes.
            </summary>
            <returns>An array of bytes representing this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.Equals(Unicorn.Writer.Primitives.PdfReference)">
            <summary>
            Equality-testing method.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if both objects refer to the same indirect object; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.Equals(System.Object)">
            <summary>
            Equality-testing method.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>True if the parameter is a <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> instance referring to the same indirect object as this; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.GetHashCode">
            <summary>
            Hash code method.
            </summary>
            <returns>A hash code derived from the value of this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.op_Equality(Unicorn.Writer.Primitives.PdfReference,Unicorn.Writer.Primitives.PdfReference)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> instance.</param>
            <returns>True if the parameters are equal; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfReference.op_Inequality(Unicorn.Writer.Primitives.PdfReference,Unicorn.Writer.Primitives.PdfReference)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfReference" /> instance.</param>
            <returns>True if the parameters are unequal; false otherwise.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfSimpleObject">
            <summary>
            This class represents a particular subtype of PDF direct objects, that can be represented in this library by immutable classes differing only in the underlying type of their value
            and the code required to represent that value as an array of bytes.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfSimpleObject.ByteLength">
            <summary>
            The number of bytes needed to represent this object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfSimpleObject.WriteTo(System.IO.Stream)">
            <summary>
            Write this object to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfSimpleObject.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert this object to bytes and append them to a <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfSimpleObject.WriteTo(Unicorn.Writer.Primitives.PdfStream)">
            <summary>
            Write this object to a <see cref="T:Unicorn.Writer.Primitives.PdfStream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfSimpleObject.FormatBytes">
            <summary>
            Convert this object into an array of bytes for writing.
            </summary>
            <returns>An array of bytes containing a representation of this object.</returns>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfStream">
            <summary>
            A class to represent a PDF stream.  These have to be stored as indirect objects, and consist of a dictionary containing stream metadata followed by the stream content itself.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfStream.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor, with indirect object parameters.
            </summary>
            <param name="objectId">An indirect object ID obtained from a cross-reference table.</param>
            <param name="generation">The generation number of this stream.  Defaults to 0.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfStream.AddBytes(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Add data to the stream.
            </summary>
            <param name="bytes">The data to add to the stream.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfStream.WriteTo(System.IO.Stream)">
            <summary>
            Write this stream to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfStream.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert this stream to an array of bytes and append them to a <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Primitives.PdfString">
            <summary>
            An immutable class representing a PDF string.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Primitives.PdfString.Value">
            <summary>
            The value of this object.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.#ctor(System.String)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="val">The value of the new object.</param>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.FormatBytes">
            <summary>
            Convert this object into an array of bytes.
            </summary>
            <returns>An array of bytes representing the contents of the object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.Equals(Unicorn.Writer.Primitives.PdfString)">
            <summary>
            Equality test.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if the two instances are equal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns>True if the other object is a <see cref="T:Unicorn.Writer.Primitives.PdfString" /> instance that is equal in value to this object; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.GetHashCode">
            <summary>
            Get a hash code for this object.
            </summary>
            <returns>A hashcode that is derived from the value of this object.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.op_Equality(Unicorn.Writer.Primitives.PdfString,Unicorn.Writer.Primitives.PdfString)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfString" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfString" /> instance.</param>
            <returns>True if the two operands are equal in value; false otherwise.</returns>
        </member>
        <member name="M:Unicorn.Writer.Primitives.PdfString.op_Inequality(Unicorn.Writer.Primitives.PdfString,Unicorn.Writer.Primitives.PdfString)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">A <see cref="T:Unicorn.Writer.Primitives.PdfString" /> instance.</param>
            <param name="b">Another <see cref="T:Unicorn.Writer.Primitives.PdfString" /> instance.</param>
            <returns>True if the two operands are unequal in value; false otherwise.</returns>
        </member>
        <member name="T:Unicorn.Writer.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Primitives_PdfDictionary_Add_Duplicate_Key_Error">
            <summary>
              Looks up a localized string similar to Key already exists..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Primitives_PdfIndirectObject_Invalid_Generation_Error">
            <summary>
              Looks up a localized string similar to The generation number must be a non-negative integer..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Primitives_PdfIndirectObject_Invalid_ObjectId_Error">
            <summary>
              Looks up a localized string similar to The object ID must be a positive integer..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Primitives_PdfIndirectObject_Nest_PdfIndirectObject_Error">
            <summary>
              Looks up a localized string similar to Indirect objects may not be nested..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Primitives_PdfIndirectObject_Write_To_PdfStream_Error">
            <summary>
              Looks up a localized string similar to Indirect objects may not be used as stream content..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Structural_PdfCrossRefTable_SetSlot_Invalid_ObjectId_Error">
            <summary>
              Looks up a localized string similar to Objects in the cross-reference table must have object IDs previously issued by the cross-reference table..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Structural_PdfPageTreeItem_Invalid_Generation_Error">
            <summary>
              Looks up a localized string similar to The generation number must be a non-negative integer..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Structural_PdfPageTreeItem_Invalid_ObjectId_Error">
            <summary>
              Looks up a localized string similar to The object ID must be a positive integer..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Structural_PdfTrailer_SetCrossReferenceTableLocation_Invalid_Location_Error">
            <summary>
              Looks up a localized string similar to The cross-reference table address {0} appeared to be invalid..
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Resources.Structural_PdfTrailer_WriteTo_CrossRef_Location_Not_Known_Error">
            <summary>
              Looks up a localized string similar to The file trailer cannot be written when the cross-reference table location is unknown..
            </summary>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfCatalogue">
            <summary>
            A class which represents a PDF catalogue.  This is the root object of every PDF file, referenced from the trailer.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfCatalogue.PageRoot">
            <summary>
            The root of the document page tree.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCatalogue.#ctor(Unicorn.Writer.Structural.PdfPageTreeNode,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pageRoot">The document page tree root node.</param>
            <param name="objectId">The indirect object ID of the catalogue.</param>
            <param name="generation">The generation number of the catalogue.  This defaults to zero and can effectively be ignored when creating a new document.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the pageRoot parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCatalogue.WriteTo(System.IO.Stream)">
            <summary>
            Write this object to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns></returns>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCatalogue.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert this object to bytes and append them to a list.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfCrossRefTable">
            <summary>
            Class representing a PDF cross-reference table.  In this implementation, the cross-reference table object is responsible for issuing and tracking all indirect object reference numbers
            required in the file.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfCrossRefTable.Count">
            <summary>
            The number of objects allocated by this object, including both free and occupied object slots.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCrossRefTable.ClaimSlot">
            <summary>
            Allocate a new slot in the cross-reference table and return its object ID.  The slot will be allocated as a free slot, and will not be marked as an occupied slot unless a later call
            to <see cref="M:Unicorn.Writer.Structural.PdfCrossRefTable.ClaimSlot" /> is made with an object whose ID matches that returned by this method.
            </summary>
            <returns>A newly-allocated object ID.</returns>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCrossRefTable.SetSlot(Unicorn.Writer.Interfaces.IPdfIndirectObject,System.Int32)">
            <summary>
            Mark a slot in the cross-reference table as occupied by an object that has been written to a particular address in the output stream.
            </summary>
            <param name="value">The object to be listed in the table.  Its ID must be an ID previously allocated by a call to <see cref="M:Unicorn.Writer.Structural.PdfCrossRefTable.ClaimSlot" />.</param>
            <param name="offset">The address of the object within the output, as a zero-based offset in bytes from the start of the strean.</param>
            <exception cref="T:System.ArgumentException">Thrown if the object ID of the value parameter is out of range for this cross-ref table.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the value parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCrossRefTable.WriteTo(System.IO.Stream)">
            <summary>
            Write this table to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The strean to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfCrossRefTableEntry">
            <summary>
            Class which represents an "occupied entry" in a <see cref="T:Unicorn.Writer.Structural.PdfCrossRefTable" />, consisting of an indirect object and its address in a PDF file.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfCrossRefTableEntry.Value">
            <summary>
            The indirect object which is the referent of this table entry.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfCrossRefTableEntry.Offset">
            <summary>
            The address of the <see cref="P:Unicorn.Writer.Structural.PdfCrossRefTableEntry.Value" /> object within its PDF file, as a byte offset from the start of the file.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfCrossRefTableEntry.#ctor(Unicorn.Writer.Interfaces.IPdfIndirectObject,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The indirect object that this entry refers to.</param>
            <param name="offset">The address of the object within its file.</param>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfHeader">
            <summary>
            A singleton class representing a PDF file header.
            </summary>
        </member>
        <member name="F:Unicorn.Writer.Structural.PdfHeader.Value">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfHeader.WriteTo(System.IO.Stream)">
            <summary>
            Write this header to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfPage">
            <summary>
            Class representing a page in a PDF document.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.PageSize">
            <summary>
            The size of this page.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.PageOrientation">
            <summary>
            The orientation of this page.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.PageGraphics">
            <summary>
            The graphics context, for drawing.  Currently dummied out.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.TopMarginPosition">
            <summary>
            The Y-coordinate of the top margin, in Unicorn coordinates.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.BottomMarginPosition">
            <summary>
            The Y-coordinate of the bottom margin, in Unicorn coordinates.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.LeftMarginPosition">
            <summary>
            The X-coordinate of the left margin, in Unicorn coordinates.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.RightMarginPosition">
            <summary>
            The X-coordinate of the right margin, in Unicorn coordinates.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.PageAvailableWidth">
            <summary>
            The width of the usable area of the page - in other words, the distane in points between the left margin and right margin.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.CurrentVerticalCursor">
            <summary>
            A saved Y-coordinate.  This is used purely by client code when laying out a page.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPage.MediaBox">
            <summary>
            The MediaBox rectangle, representing the usable area of the page (including margins) in PDF userspace coordinates.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPage.#ctor(Unicorn.Writer.Structural.PdfPageTreeNode,System.Int32,Unicorn.Interfaces.PhysicalPageSize,Unicorn.Interfaces.PageOrientation,System.Double,System.Double,System.Int32)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="parent">The parent node of this page in the document page tree.</param>
            <param name="objectId">The indirect object ID of this page.</param>
            <param name="size">The paper size of this page.</param>
            <param name="orientation">The orientation of this page.</param>
            <param name="horizontalMarginProportion">The proportion of the page taken up by each of the left and right margins.</param>
            <param name="verticalMarginProportion">The proportion of the page taken up by each of the top and bottom margins.</param>
            <param name="generation">The object generation number.  Defaults to zero.  As we do not currently support rewriting existing documents, this should not be set.</param>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPage.WriteTo(System.IO.Stream)">
            <summary>
            Write this page to a <see cref="T:System.IO.Stream" />.  This writes the page metadata, but not the content stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPage.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Conver the metadata for this page into an array of bytes and append them to a list.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes appended.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfPageTreeItem">
            <summary>
            Represents the items in a PDF page tree, whether they be nodes or pages.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPageTreeItem.Parent">
            <summary>
            The parent of this tree item.  Null if this object is the root of the tree.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPageTreeItem.#ctor(Unicorn.Writer.Structural.PdfPageTreeNode,System.Int32,System.Int32)">
            <summary>
            Value-setting constructor.
            </summary>
            <param name="parent">The parent of this item.  Can be null if this item is the root node of the tree.</param>
            <param name="objectId">The indirect object ID of this item.</param>
            <param name="generation">The generation number of this item.  Defaults to zero.  As the library does not currently support rewriting existing files, this parameter should not be set.</param>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfPageTreeNode">
            <summary>
            Represents an intermediate node in a PDF page tree.  Each document contains a page tree, and each tree contains at least one <see cref="T:Unicorn.Writer.Structural.PdfPageTreeNode" /> object, which is the root
            of the page tree.  The documents' pages are the leaves of the tree.
            </summary>
        </member>
        <member name="P:Unicorn.Writer.Structural.PdfPageTreeNode.Kids">
            <summary>
            The children of this node; the name matches the name when the object is written.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPageTreeNode.#ctor(Unicorn.Writer.Structural.PdfPageTreeNode,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent node of this node (null if this is the root of the page tree).</param>
            <param name="objectId">The indirect object ID of the node.</param>
            <param name="generation">The generation number of this object.  Defaults to 0.  As the library does not support rewriting existing files, should not be set.</param>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPageTreeNode.Add(Unicorn.Writer.Structural.PdfPageTreeItem)">
            <summary>
            Add an item to the tree, either a node or a page.
            </summary>
            <param name="child">The item to be added to the tree.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the child parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPageTreeNode.WriteTo(System.IO.Stream)">
            <summary>
            Write this tree node to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfPageTreeNode.WriteTo(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convert this tree node to bytes and append them to a list.
            </summary>
            <param name="list">The list to append to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the list parameter is null.</exception>
        </member>
        <member name="T:Unicorn.Writer.Structural.PdfTrailer">
            <summary>
            Represents the trailer of a PDF file - the very last part, which contains links to the catalogue and the cross-ref table.
            </summary>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfTrailer.#ctor(Unicorn.Writer.Structural.PdfCatalogue,Unicorn.Writer.Structural.PdfCrossRefTable)">
            <summary>
            Value-setting constructor
            </summary>
            <param name="root">The page tree root of the document.</param>
            <param name="xrefs">The cross-reference table of the document.</param>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfTrailer.SetCrossReferenceTableLocation(System.Int32)">
            <summary>
            Record the byte offset, in the PDF file, of the cross-reference table.  This method must be called before the trailer is written to the stream.
            </summary>
            <param name="location">The address of the cross-reference table, in bytes from the start of the file.</param>
        </member>
        <member name="M:Unicorn.Writer.Structural.PdfTrailer.WriteTo(System.IO.Stream)">
            <summary>
            Write this object to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the stream parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="M:Unicorn.Writer.Structural.PdfTrailer.SetCrossReferenceTableLocation(System.Int32)" /> method has not been called to set the address of the cross-reference 
            table before writing the trailer to the stream.</exception>
        </member>
    </members>
</doc>
